// Code generated by MockGen. DO NOT EDIT.
// Source: internal/trader/buyer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockScraper is a mock of Scraper interface.
type MockScraper struct {
	ctrl     *gomock.Controller
	recorder *MockScraperMockRecorder
}

// MockScraperMockRecorder is the mock recorder for MockScraper.
type MockScraperMockRecorder struct {
	mock *MockScraper
}

// NewMockScraper creates a new mock instance.
func NewMockScraper(ctrl *gomock.Controller) *MockScraper {
	mock := &MockScraper{ctrl: ctrl}
	mock.recorder = &MockScraperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScraper) EXPECT() *MockScraperMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockScraper) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockScraperMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockScraper)(nil).Name))
}

// Scrape mocks base method.
func (m *MockScraper) Scrape(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scrape", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scrape indicates an expected call of Scrape.
func (mr *MockScraperMockRecorder) Scrape(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scrape", reflect.TypeOf((*MockScraper)(nil).Scrape), ctx)
}

// MockPurchaseDB is a mock of PurchaseDB interface.
type MockPurchaseDB struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseDBMockRecorder
}

// MockPurchaseDBMockRecorder is the mock recorder for MockPurchaseDB.
type MockPurchaseDBMockRecorder struct {
	mock *MockPurchaseDB
}

// NewMockPurchaseDB creates a new mock instance.
func NewMockPurchaseDB(ctrl *gomock.Controller) *MockPurchaseDB {
	mock := &MockPurchaseDB{ctrl: ctrl}
	mock.recorder = &MockPurchaseDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseDB) EXPECT() *MockPurchaseDBMockRecorder {
	return m.recorder
}

// CheckUniqueCoin mocks base method.
func (m *MockPurchaseDB) CheckUniqueCoin(ctx context.Context, coin string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUniqueCoin", ctx, coin)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUniqueCoin indicates an expected call of CheckUniqueCoin.
func (mr *MockPurchaseDBMockRecorder) CheckUniqueCoin(ctx, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUniqueCoin", reflect.TypeOf((*MockPurchaseDB)(nil).CheckUniqueCoin), ctx, coin)
}

// StoreCoinPurchased mocks base method.
func (m *MockPurchaseDB) StoreCoinPurchased(ctx context.Context, coin string, purchasePrice, amountPurchased decimal.Decimal, timeout time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCoinPurchased", ctx, coin, purchasePrice, amountPurchased, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCoinPurchased indicates an expected call of StoreCoinPurchased.
func (mr *MockPurchaseDBMockRecorder) StoreCoinPurchased(ctx, coin, purchasePrice, amountPurchased, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCoinPurchased", reflect.TypeOf((*MockPurchaseDB)(nil).StoreCoinPurchased), ctx, coin, purchasePrice, amountPurchased, timeout)
}

// StoreCoinUnsupported mocks base method.
func (m *MockPurchaseDB) StoreCoinUnsupported(ctx context.Context, coin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCoinUnsupported", ctx, coin)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCoinUnsupported indicates an expected call of StoreCoinUnsupported.
func (mr *MockPurchaseDBMockRecorder) StoreCoinUnsupported(ctx, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCoinUnsupported", reflect.TypeOf((*MockPurchaseDB)(nil).StoreCoinUnsupported), ctx, coin)
}

// MockExchangePurchaser is a mock of ExchangePurchaser interface.
type MockExchangePurchaser struct {
	ctrl     *gomock.Controller
	recorder *MockExchangePurchaserMockRecorder
}

// MockExchangePurchaserMockRecorder is the mock recorder for MockExchangePurchaser.
type MockExchangePurchaserMockRecorder struct {
	mock *MockExchangePurchaser
}

// NewMockExchangePurchaser creates a new mock instance.
func NewMockExchangePurchaser(ctrl *gomock.Controller) *MockExchangePurchaser {
	mock := &MockExchangePurchaser{ctrl: ctrl}
	mock.recorder = &MockExchangePurchaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangePurchaser) EXPECT() *MockExchangePurchaserMockRecorder {
	return m.recorder
}

// CheckSupport mocks base method.
func (m *MockExchangePurchaser) CheckSupport(ctx context.Context, coin string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSupport", ctx, coin)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSupport indicates an expected call of CheckSupport.
func (mr *MockExchangePurchaserMockRecorder) CheckSupport(ctx, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSupport", reflect.TypeOf((*MockExchangePurchaser)(nil).CheckSupport), ctx, coin)
}

// GetLastPrice mocks base method.
func (m *MockExchangePurchaser) GetLastPrice(ctx context.Context, coin string) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPrice", ctx, coin)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPrice indicates an expected call of GetLastPrice.
func (mr *MockExchangePurchaserMockRecorder) GetLastPrice(ctx, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPrice", reflect.TypeOf((*MockExchangePurchaser)(nil).GetLastPrice), ctx, coin)
}

// PurchaseCoin mocks base method.
func (m *MockExchangePurchaser) PurchaseCoin(ctx context.Context, coin string, lastPrice decimal.Decimal) (decimal.Decimal, decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseCoin", ctx, coin, lastPrice)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(decimal.Decimal)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PurchaseCoin indicates an expected call of PurchaseCoin.
func (mr *MockExchangePurchaserMockRecorder) PurchaseCoin(ctx, coin, lastPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseCoin", reflect.TypeOf((*MockExchangePurchaser)(nil).PurchaseCoin), ctx, coin, lastPrice)
}
