// Code generated by MockGen. DO NOT EDIT.
// Source: internal/trader/seller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	trader "github.com/moonr-app/crypto-signal-trading-bot/internal/trader"
	decimal "github.com/shopspring/decimal"
)

// MockSellingDB is a mock of SellingDB interface.
type MockSellingDB struct {
	ctrl     *gomock.Controller
	recorder *MockSellingDBMockRecorder
}

// MockSellingDBMockRecorder is the mock recorder for MockSellingDB.
type MockSellingDBMockRecorder struct {
	mock *MockSellingDB
}

// NewMockSellingDB creates a new mock instance.
func NewMockSellingDB(ctrl *gomock.Controller) *MockSellingDB {
	mock := &MockSellingDB{ctrl: ctrl}
	mock.recorder = &MockSellingDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSellingDB) EXPECT() *MockSellingDBMockRecorder {
	return m.recorder
}

// GetCoinsToConsider mocks base method.
func (m *MockSellingDB) GetCoinsToConsider(ctx context.Context) ([]trader.SellingDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinsToConsider", ctx)
	ret0, _ := ret[0].([]trader.SellingDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinsToConsider indicates an expected call of GetCoinsToConsider.
func (mr *MockSellingDBMockRecorder) GetCoinsToConsider(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinsToConsider", reflect.TypeOf((*MockSellingDB)(nil).GetCoinsToConsider), ctx)
}

// MarkCoinAsCompleted mocks base method.
func (m *MockSellingDB) MarkCoinAsCompleted(ctx context.Context, coin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkCoinAsCompleted", ctx, coin)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkCoinAsCompleted indicates an expected call of MarkCoinAsCompleted.
func (mr *MockSellingDBMockRecorder) MarkCoinAsCompleted(ctx, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkCoinAsCompleted", reflect.TypeOf((*MockSellingDB)(nil).MarkCoinAsCompleted), ctx, coin)
}

// MockSellingExchange is a mock of SellingExchange interface.
type MockSellingExchange struct {
	ctrl     *gomock.Controller
	recorder *MockSellingExchangeMockRecorder
}

// MockSellingExchangeMockRecorder is the mock recorder for MockSellingExchange.
type MockSellingExchangeMockRecorder struct {
	mock *MockSellingExchange
}

// NewMockSellingExchange creates a new mock instance.
func NewMockSellingExchange(ctrl *gomock.Controller) *MockSellingExchange {
	mock := &MockSellingExchange{ctrl: ctrl}
	mock.recorder = &MockSellingExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSellingExchange) EXPECT() *MockSellingExchangeMockRecorder {
	return m.recorder
}

// GetBalanceForCoin mocks base method.
func (m *MockSellingExchange) GetBalanceForCoin(ctx context.Context, coin string) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceForCoin", ctx, coin)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceForCoin indicates an expected call of GetBalanceForCoin.
func (mr *MockSellingExchangeMockRecorder) GetBalanceForCoin(ctx, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceForCoin", reflect.TypeOf((*MockSellingExchange)(nil).GetBalanceForCoin), ctx, coin)
}

// GetLastPrice mocks base method.
func (m *MockSellingExchange) GetLastPrice(ctx context.Context, coin string) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPrice", ctx, coin)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPrice indicates an expected call of GetLastPrice.
func (mr *MockSellingExchangeMockRecorder) GetLastPrice(ctx, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPrice", reflect.TypeOf((*MockSellingExchange)(nil).GetLastPrice), ctx, coin)
}

// Sell mocks base method.
func (m *MockSellingExchange) Sell(ctx context.Context, coin string, amount, lastPrice decimal.Decimal) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sell", ctx, coin, amount, lastPrice)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sell indicates an expected call of Sell.
func (mr *MockSellingExchangeMockRecorder) Sell(ctx, coin, amount, lastPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sell", reflect.TypeOf((*MockSellingExchange)(nil).Sell), ctx, coin, amount, lastPrice)
}
