// Code generated by MockGen. DO NOT EDIT.
// Source: internal/trader/trader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// NotifyError mocks base method.
func (m *MockNotifier) NotifyError(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyError", ctx, err)
}

// NotifyError indicates an expected call of NotifyError.
func (mr *MockNotifierMockRecorder) NotifyError(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyError", reflect.TypeOf((*MockNotifier)(nil).NotifyError), ctx, err)
}

// NotifyPurchased mocks base method.
func (m *MockNotifier) NotifyPurchased(ctx context.Context, coin string, price, amount decimal.Decimal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyPurchased", ctx, coin, price, amount)
}

// NotifyPurchased indicates an expected call of NotifyPurchased.
func (mr *MockNotifierMockRecorder) NotifyPurchased(ctx, coin, price, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyPurchased", reflect.TypeOf((*MockNotifier)(nil).NotifyPurchased), ctx, coin, price, amount)
}

// NotifySold mocks base method.
func (m *MockNotifier) NotifySold(ctx context.Context, coin string, amount, pricePerCoin decimal.Decimal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifySold", ctx, coin, amount, pricePerCoin)
}

// NotifySold indicates an expected call of NotifySold.
func (mr *MockNotifierMockRecorder) NotifySold(ctx, coin, amount, pricePerCoin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySold", reflect.TypeOf((*MockNotifier)(nil).NotifySold), ctx, coin, amount, pricePerCoin)
}

// NotifyTimeout mocks base method.
func (m *MockNotifier) NotifyTimeout(ctx context.Context, coin string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyTimeout", ctx, coin)
}

// NotifyTimeout indicates an expected call of NotifyTimeout.
func (mr *MockNotifierMockRecorder) NotifyTimeout(ctx, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyTimeout", reflect.TypeOf((*MockNotifier)(nil).NotifyTimeout), ctx, coin)
}

// NotifyUnsupported mocks base method.
func (m *MockNotifier) NotifyUnsupported(ctx context.Context, coin string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyUnsupported", ctx, coin)
}

// NotifyUnsupported indicates an expected call of NotifyUnsupported.
func (mr *MockNotifierMockRecorder) NotifyUnsupported(ctx, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUnsupported", reflect.TypeOf((*MockNotifier)(nil).NotifyUnsupported), ctx, coin)
}
